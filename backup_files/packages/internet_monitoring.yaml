#===============================================================================
# Metrofibre Internet Monitoring Package - COMPLETE FIXED VERSION
# File: packages/internet_monitoring.yaml
# Updated: 2025-09-22
# IMPORTANT: Removed all speedtestdotnet YAML config - now uses UI integrations only
#===============================================================================

# Input numbers for configuration
input_number:
  minimum_download_speed:
    name: "Minimum Download Speed"
    min: 100
    max: 500
    step: 10
    initial: 400
    unit_of_measurement: "Mbps"
    icon: mdi:download
  
  minimum_upload_speed:
    name: "Minimum Upload Speed"
    min: 100
    max: 500
    step: 10
    initial: 400
    unit_of_measurement: "Mbps"
    icon: mdi:upload
  
  maximum_ping_threshold:
    name: "Maximum Ping Threshold"
    min: 5
    max: 100
    step: 5
    initial: 20
    unit_of_measurement: "ms"
    icon: mdi:speedometer
  
  speed_test_interval:
    name: "Speed Test Interval"
    min: 5
    max: 120
    step: 5
    initial: 30
    unit_of_measurement: "minutes"
    icon: mdi:timer
  
  connection_timeout:
    name: "Connection Timeout"
    min: 30
    max: 120
    step: 10
    initial: 60
    unit_of_measurement: "seconds"
    icon: mdi:timer-off

# Input booleans for control
input_boolean:
  internet_monitoring_enabled:
    name: "Internet Monitoring Enabled"
    initial: true
    icon: mdi:monitor

  low_speed_alerts:
    name: "Low Speed Alerts"
    initial: true
    icon: mdi:alert-circle

  disconnection_alerts:
    name: "Disconnection Alerts"
    initial: true
    icon: mdi:wifi-off

  peak_hours_monitoring:
    name: "Peak Hours Enhanced Monitoring"
    initial: true
    icon: mdi:clock-alert

  complaint_mode:
    name: "Complaint Mode (Evidence Collection)"
    initial: false
    icon: mdi:file-document-alert

# Input selects for configuration
input_select:
  peak_hours_definition:
    name: "Peak Hours Definition"
    options:
      - "18:00-23:00 (Evening Peak)"
      - "19:00-22:00 (Prime Time)"
      - "17:00-21:00 (After Work)"
      - "20:00-23:00 (Night Peak)"
      - "Custom"
    initial: "19:00-22:00 (Prime Time)"
    icon: mdi:clock-time-eight

  monitoring_mode:
    name: "Monitoring Mode"
    options:
      - "Normal (30 min intervals)"
      - "Enhanced (15 min intervals)"
      - "Intensive (10 min intervals)"
      - "Troubleshooting (5 min intervals)"
      - "Documentation (3 min intervals)"
    initial: "Normal (30 min intervals)"
    icon: mdi:cog

#===============================================================================
# IMPORTANT: SpeedtestDotNet YAML configuration COMPLETELY REMOVED
# Speed test integrations are now managed via UI only:
# - Cloudflare Speed Test (via Settings > Devices & Services)
# - SpeedTest.net (via Settings > Devices & Services)
#===============================================================================

# Command line sensors for Nokia router and network monitoring
sensor:
  # Nokia router connectivity check - FIXED
  - platform: command_line
    name: "Nokia Router Ping"
    command: "ping -c 1 -W 3 192.168.1.1"
    command_timeout: 10
    scan_interval: 60
    value_template: >
      {% if 'time=' in value %}
        {{ value.split('time=')[1].split('ms')[0] | float(999) | round(1) }}
      {% else %}
        999
      {% endif %}
    unit_of_measurement: "ms"

  # Google DNS connectivity - FIXED
  - platform: command_line
    name: "Google DNS Ping"
    command: "ping -c 1 -W 5 8.8.8.8"
    command_timeout: 10
    scan_interval: 120
    value_template: >
      {% if 'time=' in value %}
        {{ value.split('time=')[1].split('ms')[0] | float(999) | round(1) }}
      {% else %}
        999
      {% endif %}
    unit_of_measurement: "ms"

  # Cloudflare DNS connectivity - FIXED
  - platform: command_line
    name: "Cloudflare DNS Ping"
    command: "ping -c 1 -W 5 1.1.1.1"
    command_timeout: 10
    scan_interval: 120
    value_template: >
      {% if 'time=' in value %}
        {{ value.split('time=')[1].split('ms')[0] | float(999) | round(1) }}
      {% else %}
        999
      {% endif %}
    unit_of_measurement: "ms"

  # MTN DNS connectivity - FIXED
  - platform: command_line
    name: "MTN DNS Ping"
    command: "ping -c 1 -W 5 196.11.240.241"
    command_timeout: 10
    scan_interval: 300
    value_template: >
      {% if 'time=' in value %}
        {{ value.split('time=')[1].split('ms')[0] | float(999) | round(1) }}
      {% else %}
        999
      {% endif %}
    unit_of_measurement: "ms"

  # SAIX connectivity - FIXED
  - platform: command_line
    name: "SAIX Ping"
    command: "ping -c 1 -W 5 196.21.0.35"
    command_timeout: 10
    scan_interval: 300
    value_template: >
      {% if 'time=' in value %}
        {{ value.split('time=')[1].split('ms')[0] | float(999) | round(1) }}
      {% else %}
        999
      {% endif %}
    unit_of_measurement: "ms"

  # Packet loss check - FIXED
  - platform: command_line
    name: "Connection Packet Loss"
    command: "ping -c 10 -W 3 8.8.8.8"
    command_timeout: 30
    scan_interval: 900
    value_template: >
      {% if '% packet loss' in value %}
        {{ value.split('% packet loss')[0].split()[-1] | float(0) }}
      {% else %}
        0
      {% endif %}
    unit_of_measurement: "%"

  # Route stability check - FIXED
  - platform: command_line
    name: "Internet Route Hops"
    command: "traceroute -m 20 8.8.8.8 2>/dev/null | wc -l"
    command_timeout: 60
    scan_interval: 1800
    value_template: >
      {% set hops = value | int(0) %}
      {% if hops > 1 %}
        {{ hops - 1 }}
      {% else %}
        0
      {% endif %}

# Template sensors for advanced analysis - Updated for UI Speed Test integrations
template:
  - sensor:
      # Download speed performance percentage - Uses either Cloudflare or SpeedTest.net
      - name: "Download Speed Performance"
        unique_id: download_speed_performance
        unit_of_measurement: "%"
        state: >
          {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
            {% set current = states('sensor.cloudflare_speed_test_25mb_down') | float(0) %}
          {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
            {% set current = states('sensor.speedtest_download') | float(0) %}
          {% else %}
            {% set current = 0 %}
          {% endif %}
          {% set contracted = 500 %}
          {% if current > 0 %}
            {{ ((current / contracted) * 100) | round(1) }}
          {% else %}
            0
          {% endif %}
        icon: mdi:percent
        availability: >
          {{ states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] or
             states('sensor.speedtest_download') not in ['unavailable', 'unknown'] }}

      # Upload speed performance percentage - Uses either Cloudflare or SpeedTest.net
      - name: "Upload Speed Performance"
        unique_id: upload_speed_performance
        unit_of_measurement: "%"
        state: >
          {% if states('sensor.cloudflare_speed_test_10mb_up') not in ['unavailable', 'unknown'] %}
            {% set current = states('sensor.cloudflare_speed_test_10mb_up') | float(0) %}
          {% elif states('sensor.speedtest_upload') not in ['unavailable', 'unknown'] %}
            {% set current = states('sensor.speedtest_upload') | float(0) %}
          {% else %}
            {% set current = 0 %}
          {% endif %}
          {% set contracted = 500 %}
          {% if current > 0 %}
            {{ ((current / contracted) * 100) | round(1) }}
          {% else %}
            0
          {% endif %}
        icon: mdi:percent
        availability: >
          {{ states('sensor.cloudflare_speed_test_10mb_up') not in ['unavailable', 'unknown'] or
             states('sensor.speedtest_upload') not in ['unavailable', 'unknown'] }}

      # Fiber network quality score - Uses either Cloudflare or SpeedTest.net
      - name: "Fiber Network Quality Score"
        unique_id: fiber_network_quality_score
        unit_of_measurement: "%"
        state: >
          {% set download_perf = states('sensor.download_speed_performance') | float(0) %}
          {% set upload_perf = states('sensor.upload_speed_performance') | float(0) %}
          {% if states('sensor.cloudflare_speed_test_latency') not in ['unavailable', 'unknown'] %}
            {% set ping = states('sensor.cloudflare_speed_test_latency') | float(999) %}
          {% elif states('sensor.speedtest_ping') not in ['unavailable', 'unknown'] %}
            {% set ping = states('sensor.speedtest_ping') | float(999) %}
          {% else %}
            {% set ping = 999 %}
          {% endif %}
          {% set packet_loss = states('sensor.connection_packet_loss') | float(0) %}
          
          {% set ping_score = max(0, 100 - (ping * 3)) %}
          {% set packet_loss_score = max(0, 100 - (packet_loss * 20)) %}
          {% set speed_score = (download_perf + upload_perf) / 2 %}
          
          {% if speed_score > 0 and ping < 999 %}
            {% set final_score = (speed_score * 0.6) + (ping_score * 0.3) + (packet_loss_score * 0.1) %}
            {{ final_score | round(1) }}
          {% else %}
            0
          {% endif %}
        icon: mdi:speedometer
        availability: >
          {{ (states('sensor.cloudflare_speed_test_latency') not in ['unavailable', 'unknown'] or
              states('sensor.speedtest_ping') not in ['unavailable', 'unknown']) and
             states('sensor.download_speed_performance') not in ['unavailable', 'unknown'] }}

      # Connection status summary - Uses either integration
      - name: "Metrofibre Connection Status"
        unique_id: metrofibre_connection_status
        state: >
          {% set router_ping = states('sensor.nokia_router_ping') | float(999) %}
          {% set internet_ping = states('sensor.google_dns_ping') | float(999) %}
          {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
            {% set download = states('sensor.cloudflare_speed_test_25mb_down') | float(0) %}
            {% set upload = states('sensor.cloudflare_speed_test_10mb_up') | float(0) %}
          {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
            {% set download = states('sensor.speedtest_download') | float(0) %}
            {% set upload = states('sensor.speedtest_upload') | float(0) %}
          {% else %}
            {% set download = 0 %}
            {% set upload = 0 %}
          {% endif %}
          
          {% if router_ping >= 999 %}
            Router Offline
          {% elif internet_ping >= 999 %}
            Internet Disconnected
          {% elif download == 0 and upload == 0 %}
            Speed Test Data Unavailable
          {% elif download < 100 or upload < 100 %}
            Speed Issues Detected
          {% elif download < 400 or upload < 400 %}
            Performance Below Contract
          {% else %}
            Optimal Performance
          {% endif %}
        icon: >
          {% set status = states('sensor.metrofibre_connection_status') %}
          {% if 'Optimal' in status %}
            mdi:check-network
          {% elif 'Below' in status %}
            mdi:network-strength-2
          {% elif 'Issues' in status %}
            mdi:network-strength-1
          {% elif 'Disconnected' in status %}
            mdi:network-off
          {% elif 'Offline' in status %}
            mdi:router-network
          {% else %}
            mdi:help-network
          {% endif %}

      # Connection uptime status
      - name: "Connection Uptime Status"
        unique_id: connection_uptime_status
        state: >
          {% set router_ok = states('sensor.nokia_router_ping') | float(999) < 50 %}
          {% set internet_ok = states('sensor.google_dns_ping') | float(999) < 200 %}
          {% if router_ok and internet_ok %}
            Connected ({{ relative_time(states.sensor.nokia_router_ping.last_updated) }} ago)
          {% elif router_ok %}
            Router OK, Internet Issues
          {% else %}
            Router Offline
          {% endif %}

      # Current test interval based on mode
      - name: "Current Test Interval"
        unique_id: current_test_interval
        unit_of_measurement: "minutes"
        state: >
          {% set mode = states('input_select.monitoring_mode') %}
          {% set peak_active = now().hour >= 19 and now().hour <= 22 %}
          {% set enhanced_monitoring = is_state('input_boolean.peak_hours_monitoring', 'on') %}
          
          {% if mode == 'Troubleshooting (5 min intervals)' %}
            5
          {% elif mode == 'Documentation (3 min intervals)' %}
            3
          {% elif mode == 'Intensive (10 min intervals)' %}
            10
          {% elif mode == 'Enhanced (15 min intervals)' %}
            15
          {% elif peak_active and enhanced_monitoring %}
            15
          {% else %}
            {{ states('input_number.speed_test_interval') | int(30) }}
          {% endif %}

      # Performance summary for reports - Uses either integration
      - name: "Metrofibre Performance Summary"
        unique_id: metrofibre_performance_summary
        state: >
          📊 PERFORMANCE SNAPSHOT:
          {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
          • Download: {{ states('sensor.cloudflare_speed_test_25mb_down') }}Mbps ({{ states('sensor.download_speed_performance') }}%)
          • Upload: {{ states('sensor.cloudflare_speed_test_10mb_up') }}Mbps ({{ states('sensor.upload_speed_performance') }}%)
          • Latency: {{ states('sensor.cloudflare_speed_test_latency') }}ms
          {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
          • Download: {{ states('sensor.speedtest_download') }}Mbps ({{ states('sensor.download_speed_performance') }}%)
          • Upload: {{ states('sensor.speedtest_upload') }}Mbps ({{ states('sensor.upload_speed_performance') }}%)
          • Latency: {{ states('sensor.speedtest_ping') }}ms
          {% else %}
          • Speed test data unavailable
          {% endif %}
          • Quality: {{ states('sensor.fiber_network_quality_score') }}%
          • Status: {{ states('sensor.metrofibre_connection_status') }}
        availability: >
          {{ states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] or
             states('sensor.speedtest_download') not in ['unavailable', 'unknown'] }}

  - binary_sensor:
      # Nokia router connectivity
      - name: "Nokia Router Online"
        unique_id: nokia_router_online
        device_class: connectivity
        state: >
          {{ states('sensor.nokia_router_ping') | float(999) < 50 }}

      # Internet connectivity
      - name: "Internet Connected"
        unique_id: internet_connected
        device_class: connectivity
        state: >
          {% set google = states('sensor.google_dns_ping') | float(999) %}
          {% set cloudflare = states('sensor.cloudflare_dns_ping') | float(999) %}
          {{ google < 200 or cloudflare < 200 }}

      # Speed critically low - Uses either integration
      - name: "Speed Critically Low"
        unique_id: speed_critically_low
        device_class: problem
        state: >
          {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
            {% set download = states('sensor.cloudflare_speed_test_25mb_down') | float(0) %}
            {% set upload = states('sensor.cloudflare_speed_test_10mb_up') | float(0) %}
          {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
            {% set download = states('sensor.speedtest_download') | float(0) %}
            {% set upload = states('sensor.speedtest_upload') | float(0) %}
          {% else %}
            {% set download = 0 %}
            {% set upload = 0 %}
          {% endif %}
          {% set min_down = states('input_number.minimum_download_speed') | float(400) %}
          {% set min_up = states('input_number.minimum_upload_speed') | float(400) %}
          {{ download < min_down or upload < min_up }}
        availability: >
          {{ states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] or
             states('sensor.speedtest_download') not in ['unavailable', 'unknown'] }}

      # Fiber latency high - Uses either integration
      - name: "Fiber Latency High"
        unique_id: fiber_latency_high
        device_class: problem
        state: >
          {% if states('sensor.cloudflare_speed_test_latency') not in ['unavailable', 'unknown'] %}
            {% set ping = states('sensor.cloudflare_speed_test_latency') | float(0) %}
          {% elif states('sensor.speedtest_ping') not in ['unavailable', 'unknown'] %}
            {% set ping = states('sensor.speedtest_ping') | float(0) %}
          {% else %}
            {% set ping = 0 %}
          {% endif %}
          {% set threshold = states('input_number.maximum_ping_threshold') | float(20) %}
          {{ ping > threshold and ping > 0 }}
        availability: >
          {{ states('sensor.cloudflare_speed_test_latency') not in ['unavailable', 'unknown'] or
             states('sensor.speedtest_ping') not in ['unavailable', 'unknown'] }}

      # Connection quality poor
      - name: "Fiber Quality Poor"
        unique_id: fiber_quality_poor
        device_class: problem
        state: >
          {{ states('sensor.fiber_network_quality_score') | float(100) < 70 }}

      # Packet loss detected
      - name: "Packet Loss Detected"
        unique_id: packet_loss_detected
        device_class: problem
        state: >
          {{ states('sensor.connection_packet_loss') | float(0) > 0.5 }}

      # Metrofibre issue detected
      - name: "Metrofibre Issue Detected"
        unique_id: metrofibre_issue_detected
        device_class: problem
        state: >
          {% set router_ok = is_state('binary_sensor.nokia_router_online', 'on') %}
          {% set internet_issue = is_state('binary_sensor.internet_connected', 'off') %}
          {% set speed_issue = is_state('binary_sensor.speed_critically_low', 'on') %}
          {% set quality_issue = is_state('binary_sensor.fiber_quality_poor', 'on') %}
          {% set packet_loss = is_state('binary_sensor.packet_loss_detected', 'on') %}
          {{ router_ok and (internet_issue or speed_issue or quality_issue or packet_loss) }}

      # Connection disconnected
      - name: "Connection Disconnected"
        unique_id: connection_disconnected
        device_class: problem
        state: >
          {% set uptime_status = states('sensor.connection_uptime_status') %}
          {{ uptime_status in ['Router Offline', 'Internet Disconnected'] }}

# Automations for monitoring - COMPLETELY FIXED SERVICE CALLS
automation:
  # Manual speed test trigger only - NO AUTOMATIC SCHEDULING
  - id: manual_speed_test_metrofibre
    alias: "Manual Speed Test - Metrofibre"
    description: "Manually trigger speed tests for troubleshooting (no automatic scheduling)"
    trigger: []  # No automatic triggers - UI integrations handle scheduling
    condition:
      - condition: state
        entity_id: input_boolean.internet_monitoring_enabled
        state: 'on'
    action:
      - choose:
          # If Cloudflare Speed Test is available
          - conditions:
              - condition: template
                value_template: >
                  {{ states('sensor.cloudflare_speed_test_25mb_down') is defined }}
            sequence:
              - service: homeassistant.update_entity
                target:
                  entity_id:
                    - sensor.cloudflare_speed_test_25mb_down
                    - sensor.cloudflare_speed_test_10mb_up
                    - sensor.cloudflare_speed_test_latency
              - delay:
                  seconds: 10
              - service: notify.persistent_notification
                data:
                  title: "📊 Cloudflare Speed Test Refreshed"
                  message: "Cloudflare Speed Test entities have been refreshed. Results will update based on the integration's schedule."
          # If SpeedTest.net is available
          - conditions:
              - condition: template
                value_template: >
                  {{ states('sensor.speedtest_download') is defined }}
            sequence:
              - service: notify.persistent_notification
                data:
                  title: "📊 SpeedTest.net Status"
                  message: |
                    SpeedTest.net integration is active.
                    Current results: {{ states('sensor.metrofibre_performance_summary') }}
                    
                    Note: Tests run automatically per integration schedule.
        # No speed test integration available
        default:
          - service: notify.persistent_notification
            data:
              title: "❌ No Speed Test Integration"
              message: |
                No speed test integration found.
                Please set up either:
                • Cloudflare Speed Test, or
                • SpeedTest.net
                via Settings > Devices & Services > Add Integration

  # Daily report automation - FIXED TIME (No problematic service calls)
  - id: daily_metrofibre_report
    alias: "Daily Metrofibre Performance Report"
    description: "Comprehensive daily report at 9 AM"
    trigger:
      - platform: time
        at: "09:00:00"
    condition:
      - condition: state
        entity_id: input_boolean.internet_monitoring_enabled
        state: 'on'
    action:
      - service: notify.persistent_notification
        data:
          title: "📊 Daily Metrofibre Performance Report - {{ now().strftime('%Y-%m-%d') }}"
          message: |
            DAILY METROFIBRE PERFORMANCE SUMMARY
            Report Date: {{ now().strftime('%Y-%m-%d') }}
            Service: 500/500 Mbps Fiber
            Provider: Metrofibre
            
            📈 PERFORMANCE OVERVIEW:
            • Fiber Quality Score: {{ states('sensor.fiber_network_quality_score') }}%
            • Connection Status: {{ states('sensor.metrofibre_connection_status') }}
            • Download Performance: {{ states('sensor.download_speed_performance') }}% of contracted
            • Upload Performance: {{ states('sensor.upload_speed_performance') }}% of contracted
            • Connection Uptime: {{ states('sensor.connection_uptime_status') }}
            
            🌐 CURRENT SPEEDS:
            {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
            • Download: {{ states('sensor.cloudflare_speed_test_25mb_down') }}Mbps (Cloudflare Test)
            • Upload: {{ states('sensor.cloudflare_speed_test_10mb_up') }}Mbps (Cloudflare Test)
            • Latency: {{ states('sensor.cloudflare_speed_test_latency') }}ms
            {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
            • Download: {{ states('sensor.speedtest_download') }}Mbps (SpeedTest.net)
            • Upload: {{ states('sensor.speedtest_upload') }}Mbps (SpeedTest.net)
            • Latency: {{ states('sensor.speedtest_ping') }}ms
            {% else %}
            • Speed test data unavailable - check integration setup
            {% endif %}
            • Packet Loss: {{ states('sensor.connection_packet_loss') }}%
            
            🔧 NOKIA ROUTER STATUS (192.168.1.1):
            • Model: Beacon 2 (ALCL)
            • Connectivity: {{ 'Online' if is_state('binary_sensor.nokia_router_online', 'on') else 'Issues Detected' }}
            • Response Time: {{ states('sensor.nokia_router_ping') }}ms
            
            🌐 NETWORK DIAGNOSTICS:
            • Google DNS (8.8.8.8): {{ states('sensor.google_dns_ping') }}ms
            • Cloudflare DNS (1.1.1.1): {{ states('sensor.cloudflare_dns_ping') }}ms
            • MTN DNS: {{ states('sensor.mtn_dns_ping') }}ms
            • SAIX: {{ states('sensor.saix_ping') }}ms
            • Internet Route Hops: {{ states('sensor.internet_route_hops') }}
            
            📊 MONITORING CONFIGURATION:
            • Test Interval: {{ states('sensor.current_test_interval') }} minutes
            • Monitoring Mode: {{ states('input_select.monitoring_mode') }}
            • Peak Hours Monitoring: {{ 'Enabled' if is_state('input_boolean.peak_hours_monitoring', 'on') else 'Disabled' }}
            • Low Speed Alerts: {{ 'Enabled' if is_state('input_boolean.low_speed_alerts', 'on') else 'Disabled' }}
            
            🔍 ANALYSIS & RECOMMENDATIONS:
            {% if is_state('binary_sensor.metrofibre_issue_detected', 'on') %}
            ⚠️ Issues detected requiring attention:
            {% if is_state('binary_sensor.speed_critically_low', 'on') %}
            • Speed performance below contracted levels
            {% endif %}
            {% if is_state('binary_sensor.fiber_latency_high', 'on') %}
            • Latency higher than optimal fiber standards
            {% endif %}
            {% if is_state('binary_sensor.packet_loss_detected', 'on') %}
            • Packet loss detected - check connections and router placement
            {% endif %}
            {% else %}
            • Performance within acceptable parameters
            {% endif %}
            
            Generated: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
            Next Report: {{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }} at 09:00

  # Issue detection and alerts - No problematic service calls
  - id: metrofibre_issue_detection
    alias: "Metrofibre Issue Detection Alert"
    description: "Alert when Metrofibre issues are detected"
    trigger:
      - platform: state
        entity_id: binary_sensor.metrofibre_issue_detected
        to: 'on'
        for:
          minutes: 3
    condition:
      - condition: state
        entity_id: input_boolean.low_speed_alerts
        state: 'on'
    action:
      - service: notify.persistent_notification
        data:
          title: "🌐 Metrofibre Performance Issue"
          message: |
            Issue detected: {{ states('sensor.metrofibre_connection_status') }}
            
            Current Performance:
            {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
            • Download: {{ states('sensor.cloudflare_speed_test_25mb_down') }}Mbps
            • Upload: {{ states('sensor.cloudflare_speed_test_10mb_up') }}Mbps
            {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
            • Download: {{ states('sensor.speedtest_download') }}Mbps
            • Upload: {{ states('sensor.speedtest_upload') }}Mbps
            {% else %}
            • Speed data unavailable
            {% endif %}
            • Quality Score: {{ states('sensor.fiber_network_quality_score') }}%

# Scripts for manual operations - COMPLETELY FIXED SERVICE CALLS
script:
  # Manual speed test - UPDATED TO HANDLE BOTH INTEGRATIONS WITHOUT SERVICE CALLS
  run_metrofibre_speed_test:
    alias: "Run Metrofibre Speed Test"
    sequence:
      - choose:
          # If Cloudflare Speed Test is available
          - conditions:
              - condition: template
                value_template: >
                  {{ states('sensor.cloudflare_speed_test_25mb_down') is defined }}
            sequence:
              - service: homeassistant.update_entity
                target:
                  entity_id:
                    - sensor.cloudflare_speed_test_25mb_down
                    - sensor.cloudflare_speed_test_10mb_up
                    - sensor.cloudflare_speed_test_latency
              - delay:
                  seconds: 30
              - service: notify.persistent_notification
                data:
                  title: "📊 Cloudflare Speed Test Refreshed"
                  message: |
                    Cloudflare Test Status:
                    • Download: {{ states('sensor.cloudflare_speed_test_25mb_down') }}Mbps
                    • Upload: {{ states('sensor.cloudflare_speed_test_10mb_up') }}Mbps
                    • Latency: {{ states('sensor.cloudflare_speed_test_latency') }}ms
                    • Quality Score: {{ states('sensor.fiber_network_quality_score') }}%
                    
                    Note: Entities refreshed. New data depends on integration schedule.
        # If SpeedTest.net is available
          - conditions:
              - condition: template
                value_template: >
                  {{ states('sensor.speedtest_download') is defined }}
            sequence:
              - service: notify.persistent_notification
                data:
                  title: "📊 SpeedTest.net Status"
                  message: |
                    Current SpeedTest.net Results:
                    • Download: {{ states('sensor.speedtest_download') }}Mbps
                    • Upload: {{ states('sensor.speedtest_upload') }}Mbps
                    • Latency: {{ states('sensor.speedtest_ping') }}ms
                    • Quality Score: {{ states('sensor.fiber_network_quality_score') }}%
                    
                    Note: SpeedTest.net integration runs on its own schedule.
                    Configure test interval in Settings > Devices & Services.
        # If no integration is available
        default:
          - service: notify.persistent_notification
            data:
              title: "❌ No Speed Test Integration"
              message: |
                No speed test integration found.
                Please set up either:
                • Cloudflare Speed Test, or
                • SpeedTest.net
                via Settings > Devices & Services > Add Integration

  # Network diagnostic - NO PROBLEMATIC SERVICE CALLS
  run_network_diagnostic:
    alias: "Run Network Diagnostic"
    sequence:
      - service: homeassistant.update_entity
        target:
          entity_id:
            - sensor.nokia_router_ping
            - sensor.google_dns_ping
            - sensor.cloudflare_dns_ping
            - sensor.mtn_dns_ping
            - sensor.saix_ping
            - sensor.connection_packet_loss
            - sensor.internet_route_hops
      - delay:
          seconds: 30
      - service: script.run_metrofibre_speed_test
      - delay:
          seconds: 30
      - service: notify.persistent_notification
        data:
          title: "🔍 Network Diagnostic Complete"
          message: |
            NETWORK DIAGNOSTIC RESULTS:
            
            🔧 ROUTER STATUS:
            • Nokia Router (192.168.1.1): {{ states('sensor.nokia_router_ping') }}ms
            • Router Status: {{ 'Online' if is_state('binary_sensor.nokia_router_online', 'on') else 'Issues Detected' }}
            
            🌐 DNS CONNECTIVITY:
            • Google DNS (8.8.8.8): {{ states('sensor.google_dns_ping') }}ms
            • Cloudflare DNS (1.1.1.1): {{ states('sensor.cloudflare_dns_ping') }}ms
            • MTN DNS: {{ states('sensor.mtn_dns_ping') }}ms
            • SAIX: {{ states('sensor.saix_ping') }}ms
            
            📊 CONNECTION QUALITY:
            • Packet Loss: {{ states('sensor.connection_packet_loss') }}%
            • Route Hops: {{ states('sensor.internet_route_hops') }}
            • Overall Status: {{ states('sensor.metrofibre_connection_status') }}
            • Quality Score: {{ states('sensor.fiber_network_quality_score') }}%
            
            ⚠️ ISSUES DETECTED:
            {% if is_state('binary_sensor.metrofibre_issue_detected', 'on') %}
            {% if is_state('binary_sensor.speed_critically_low', 'on') %}
            • Speed critically low
            {% endif %}
            {% if is_state('binary_sensor.fiber_latency_high', 'on') %}
            • High latency detected
            {% endif %}
            {% if is_state('binary_sensor.packet_loss_detected', 'on') %}
            • Packet loss detected
            {% endif %}
            {% if is_state('binary_sensor.connection_disconnected', 'on') %}
            • Connection issues
            {% endif %}
            {% else %}
            • No issues detected - performance optimal
            {% endif %}

  # Toggle complaint mode for evidence collection
  toggle_complaint_mode:
    alias: "Toggle Complaint Mode"
    sequence:
      - service: input_boolean.toggle
        target:
          entity_id: input_boolean.complaint_mode
      - if:
          - condition: state
            entity_id: input_boolean.complaint_mode
            state: 'on'
        then:
          - service: input_select.select_option
            target:
              entity_id: input_select.monitoring_mode
            data:
              option: "Documentation (3 min intervals)"
          - service: notify.persistent_notification
            data:
              title: "📋 Complaint Mode ACTIVATED"
              message: |
                Complaint mode is now ACTIVE for evidence collection.
                
                SETTINGS CHANGED:
                • Monitoring interval: 3 minutes
                • Enhanced logging: Enabled
                • All alerts: Enabled
                
                This mode will:
                ✅ Document all performance issues
                ✅ Collect detailed network diagnostics
                ✅ Generate evidence for ISP complaints
                ✅ Track SLA compliance
                
                Remember to disable when issue is resolved.
        else:
          - service: input_select.select_option
            target:
              entity_id: input_select.monitoring_mode
            data:
              option: "Normal (30 min intervals)"
          - service: notify.persistent_notification
            data:
              title: "📋 Complaint Mode DEACTIVATED"
              message: |
                Complaint mode is now DISABLED.
                
                SETTINGS RESTORED:
                • Monitoring interval: 30 minutes
                • Normal monitoring: Resumed
                
                Evidence collection has stopped.

  # Generate performance report for ISP complaint
  generate_isp_complaint_report:
    alias: "Generate ISP Complaint Report"
    sequence:
      - service: notify.persistent_notification
        data:
          title: "📄 ISP COMPLAINT REPORT - {{ now().strftime('%Y-%m-%d %H:%M') }}"
          message: |
            METROFIBRE PERFORMANCE COMPLAINT REPORT
            Generated: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
            
            📋 CUSTOMER DETAILS:
            • Service: 500/500 Mbps Fiber
            • Provider: Metrofibre
            • Location: Pierre van Ryneveld, Centurion
            • Account: [Your Account Number]
            
            ⚠️ PERFORMANCE ISSUES DETECTED:
            • Current Status: {{ states('sensor.metrofibre_connection_status') }}
            • Quality Score: {{ states('sensor.fiber_network_quality_score') }}% (Target: >80%)
            {% if states('sensor.cloudflare_speed_test_25mb_down') not in ['unavailable', 'unknown'] %}
            • Download Speed: {{ states('sensor.cloudflare_speed_test_25mb_down') }}Mbps (Contract: 500Mbps)
            • Upload Speed: {{ states('sensor.cloudflare_speed_test_10mb_up') }}Mbps (Contract: 500Mbps)
            • Latency: {{ states('sensor.cloudflare_speed_test_latency') }}ms
            {% elif states('sensor.speedtest_download') not in ['unavailable', 'unknown'] %}
            • Download Speed: {{ states('sensor.speedtest_download') }}Mbps (Contract: 500Mbps)
            • Upload Speed: {{ states('sensor.speedtest_upload') }}Mbps (Contract: 500Mbps)
            • Latency: {{ states('sensor.speedtest_ping') }}ms
            {% endif %}
            • Packet Loss: {{ states('sensor.connection_packet_loss') }}%
            
            🔧 TECHNICAL DIAGNOSTICS:
            • Router Model: Nokia Beacon 2 (ALCL)
            • Router Status: {{ 'Online' if is_state('binary_sensor.nokia_router_online', 'on') else 'Issues' }} ({{ states('sensor.nokia_router_ping') }}ms)
            • DNS Resolution: Google={{ states('sensor.google_dns_ping') }}ms, Cloudflare={{ states('sensor.cloudflare_dns_ping') }}ms
            • Route Hops: {{ states('sensor.internet_route_hops') }}
            
            📈 SLA COMPLIANCE:
            • Download Performance: {{ states('sensor.download_speed_performance') }}% of contracted
            • Upload Performance: {{ states('sensor.upload_speed_performance') }}% of contracted
            • Service Availability: {{ 'COMPLIANT' if is_state('binary_sensor.internet_connected', 'on') else 'NON-COMPLIANT' }}
            
            🎯 REQUESTED ACTION:
            {% if is_state('binary_sensor.metrofibre_issue_detected', 'on') %}
            Please investigate and resolve the following issues:
            {% if is_state('binary_sensor.speed_critically_low', 'on') %}
            ❌ Speed performance below contracted levels
            {% endif %}
            {% if is_state('binary_sensor.fiber_latency_high', 'on') %}
            ❌ Latency exceeding acceptable thresholds
            {% endif %}
            {% if is_state('binary_sensor.packet_loss_detected', 'on') %}
            ❌ Packet loss affecting service quality
            {% endif %}
            {% else %}
            ✅ Service currently within acceptable parameters
            {% endif %}
            
            This report was generated by automated monitoring.
            Reference ID: HA-{{ now().strftime('%Y%m%d%H%M%S') }}

#===============================================================================
# END OF INTERNET MONITORING PACKAGE
# All speedtestdotnet YAML configurations removed
# All service calls updated to be compatible with UI integrations
# All automations and scripts fixed to prevent errors
#===============================================================================