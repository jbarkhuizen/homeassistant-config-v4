#===============================================================================
# Advanced Automation Management Package
# File: packages/automation_management.yaml
# Updated: 2025-09-11
# Purpose: Automation monitoring, management and optimization
#===============================================================================

# Template sensors for automation tracking
template:
  - sensor:
      # Count of active automations
      - name: "Active Automations Count"
        unique_id: active_automations_count
        state: >
          {{ states.automation | selectattr('state', 'eq', 'on') | list | count }}
        icon: mdi:robot

      # Count of disabled automations
      - name: "Disabled Automations Count"
        unique_id: disabled_automations_count
        state: >
          {{ states.automation | selectattr('state', 'eq', 'off') | list | count }}
        icon: mdi:robot-off

      # System uptime in days
      - name: "System Uptime Days"
        unique_id: system_uptime_days
        unit_of_measurement: "days"
        state: >
          {% set uptime = states('sensor.uptime') %}
          {% if uptime != 'unknown' and uptime != 'unavailable' %}
            {{ (uptime | as_datetime | as_local - now().replace(hour=0, minute=0, second=0, microsecond=0)).days }}
          {% else %}
            0
          {% endif %}

      # Last automation triggered
      - name: "Last Automation Triggered"
        unique_id: last_automation_triggered
        state: >
          {% set automation_entities = states.automation | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list %}
          {% set last_triggered = namespace(entity='', time='') %}
          {% for automation in automation_entities %}
            {% set last_triggered_time = state_attr(automation, 'last_triggered') %}
            {% if last_triggered_time and (not last_triggered.time or last_triggered_time > last_triggered.time) %}
              {% set last_triggered.entity = automation %}
              {% set last_triggered.time = last_triggered_time %}
            {% endif %}
          {% endfor %}
          {{ last_triggered.entity | replace('automation.', '') | replace('_', ' ') | title }}

  - binary_sensor:
      # System health status
      - name: "System Health Status"
        unique_id: system_health_status
        device_class: problem
        state: >
          {% set failed_automations = states.automation | selectattr('attributes.last_triggered', 'defined') | selectattr('state', 'eq', 'unavailable') | list | count %}
          {% set system_load = states('sensor.processor_use') | float(0) %}
          {% set memory_use = states('sensor.memory_use_percent') | float(0) %}
          {{ failed_automations == 0 and system_load < 80 and memory_use < 85 }}

      # Maintenance mode active
      - name: "Maintenance Mode Active"
        unique_id: maintenance_mode_active
        device_class: running
        state: "{{ is_state('input_boolean.maintenance_mode', 'on') }}"

# Advanced automation management automations
automation:
  # Weekly automation health check
  - id: weekly_automation_health_check
    alias: "Weekly Automation Health Check"
    description: "Comprehensive weekly check of automation system health"
    trigger:
      - platform: time
        at: "09:00:00"
      - platform: time_pattern
        # Also run every Sunday
        hours: 9
        minutes: 0
    condition:
      - condition: time
        weekday:
          - sun
    action:
      - service: counter.reset
        entity_id: counter.daily_automations_triggered
      - service: script.automation_health_report
      - service: notify.email_ha
        data:
          title: "üîß Weekly Automation Health Report"
          message: |
            Weekly Automation Health Check - {{ now().strftime('%Y-%m-%d') }}

            üìä AUTOMATION STATISTICS:
            ‚Ä¢ Active Automations: {{ states('sensor.active_automations_count') }}
            ‚Ä¢ Disabled Automations: {{ states('sensor.disabled_automations_count') }}
            ‚Ä¢ Last Triggered: {{ states('sensor.last_automation_triggered') }}
            ‚Ä¢ Daily Triggers This Week: {{ states('counter.daily_automations_triggered') }}

            üñ•Ô∏è SYSTEM HEALTH:
            ‚Ä¢ System Status: {{ 'Healthy' if is_state('binary_sensor.system_health_status', 'on') else 'Needs Attention' }}
            ‚Ä¢ Uptime: {{ states('sensor.system_uptime_days') }} days
            ‚Ä¢ CPU Usage: {{ states('sensor.processor_use') }}%
            ‚Ä¢ Memory Usage: {{ states('sensor.memory_use_percent') }}%
            ‚Ä¢ Disk Usage: {{ states('sensor.disk_use_percent_config') }}%

            üîß MAINTENANCE STATUS:
            ‚Ä¢ Maintenance Mode: {{ 'Active' if is_state('binary_sensor.maintenance_mode_active', 'on') else 'Inactive' }}

            üìà PERFORMANCE METRICS:
            ‚Ä¢ Database Size: {{ states('sensor.database_size') }}MB
            ‚Ä¢ Config Check: Last run {{ relative_time(states.persistent_notification | selectattr('attributes.title', 'search', 'Config') | map(attribute='attributes.created_at') | list | last) }} ago

            Report Generated: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

  # Failed automation detection
  - id: failed_automation_detection
    alias: "Failed Automation Detection"
    description: "Detect and alert on failed automations"
    trigger:
      - platform: event
        event_type: automation_triggered
      - platform: event
        event_type: logbook_entry
    condition:
      - condition: template
        value_template: >
          {{ 'error' in trigger.event.data.get('message', '').lower() or
             'failed' in trigger.event.data.get('message', '').lower() }}
    action:
      - service: counter.increment
        entity_id: counter.daily_automations_triggered
      - service: telegram_bot.send_message
        data:
          config_entry_id: 01K7PH2MD1SA9VXHCP39WVCJM4
          title: "‚ö†Ô∏è Automation Failure Detected"
          message: |
            Automation failure detected:

            üö® Error: {{ trigger.event.data.get('message', 'Unknown error') }}
            üïí Time: {{ now().strftime('%H:%M:%S') }}
            üîß Entity: {{ trigger.event.data.get('entity_id', 'Unknown') }}

            Please check the automation logs.

  # System performance monitoring
  - id: system_performance_monitoring
    alias: "System Performance Monitoring"
    description: "Monitor system performance and alert on issues"
    trigger:
      - platform: numeric_state
        entity_id: sensor.processor_use
        above: 85
        for:
          minutes: 10
      - platform: numeric_state
        entity_id: sensor.memory_use_percent
        above: 90
        for:
          minutes: 5
      - platform: numeric_state
        entity_id: sensor.disk_use_percent_config
        above: 85
    action:
      - service: notify.email_ha
        data:
          title: "‚ö†Ô∏è System Performance Alert"
          message: |
            System performance alert triggered:

            üñ•Ô∏è CURRENT METRICS:
            ‚Ä¢ CPU Usage: {{ states('sensor.processor_use') }}%
            ‚Ä¢ Memory Usage: {{ states('sensor.memory_use_percent') }}%  
            ‚Ä¢ Disk Usage: {{ states('sensor.disk_use_percent_config') }}%
            ‚Ä¢ System Load: {{ states('sensor.load_15m') }}

            üïí Alert Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

            Consider investigating system performance.

# Scripts for automation management
script:
  automation_health_report:
    alias: "Automation Health Report"
    sequence:
      - service: homeassistant.update_entity
        target:
          entity_id:
            - sensor.active_automations_count
            - sensor.disabled_automations_count
            - sensor.last_automation_triggered
            - binary_sensor.system_health_status

  enable_maintenance_mode:
    alias: "Enable Maintenance Mode"
    sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.maintenance_mode
      - service: automation.turn_off
        target:
          entity_id: automation.battery_low_warning_advanced
      - service: telegram_bot.send_message
        data:
          config_entry_id: 01K7PH2MD1SA9VXHCP39WVCJM4
          title: "üîß Maintenance Mode Enabled"
          message: "System maintenance mode has been activated. Some automations are temporarily disabled."

  disable_maintenance_mode:
    alias: "Disable Maintenance Mode"
    sequence:
      - service: input_boolean.turn_off
        entity_id: input_boolean.maintenance_mode
      - service: automation.turn_on
        target:
          entity_id: automation.battery_low_warning_advanced
      - service: telegram_bot.send_message
        data:
          config_entry_id: 01K7PH2MD1SA9VXHCP39WVCJM4
          title: "‚úÖ Maintenance Mode Disabled"
          message: "System maintenance mode has been deactivated. All automations are now active."

  restart_core_services:
    alias: "Restart Core Services"
    sequence:
      - service: homeassistant.restart
      - delay:
          minutes: 2
      - service: telegram_bot.send_message
        data:
          config_entry_id: 01K7PH2MD1SA9VXHCP39WVCJM4
          title: "üîÑ Core Services Restarted"
          message: "Home Assistant core services have been restarted successfully."
