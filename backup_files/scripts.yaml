# OneDrive Management Scripts (Updated)
# Add these to your scripts.yaml file

# Diagnostic script to check all OneDrive entities
onedrive_diagnostic_check:
  alias: "OneDrive Diagnostic Check"
  description: "Check status of all OneDrive entities for troubleshooting"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîç OneDrive Diagnostic Report"
        message: >
          CORE ENTITIES STATUS:
          ‚Ä¢ Used Storage: {{ states('sensor.onedrive_used_storage') }}
          ‚Ä¢ Total Storage: {{ states('sensor.onedrive_total_available_storage') }}
          ‚Ä¢ Remaining: {{ states('sensor.onedrive_remaining_storage') }}
          ‚Ä¢ Percentage: {{ states('sensor.onedrive_storage_percentage') }}%
          ‚Ä¢ Drive State: {{ states('sensor.onedrive_drive_state') }}
          ‚Ä¢ Health: {{ states('binary_sensor.onedrive_health') }}
          ‚Ä¢ Storage Warning: {{ states('binary_sensor.onedrive_storage_warning') }}
          ‚Ä¢ Days Until Full: {{ states('sensor.onedrive_days_until_full') }}
        data:
          tag: "onedrive_diagnostic"

# Create Home Assistant Backup to OneDrive (Updated)
create_onedrive_backup:
  alias: "Create OneDrive Backup"
  description: "Create a full Home Assistant backup and sync to OneDrive"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîÑ Backup Starting"
        message: "Creating Home Assistant backup..."
    - service: backup.create
      data:
        name: "HA_Backup_{{ now().strftime('%Y%m%d_%H%M%S') }}"
        compressed: true
    - delay:
        minutes: 5 # Wait for backup to complete
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "‚úÖ Backup Complete"
        message: >
          Home Assistant backup created successfully!
          Current OneDrive usage: {{ states('sensor.onedrive_storage_percentage') }}%
        data:
          tag: "backup_complete"

# Force OneDrive Sync (Updated)
force_onedrive_sync:
  alias: "Force OneDrive Sync"
  description: "Manually trigger OneDrive synchronization"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîÑ Force Sync Started"
        message: >
          Forcing OneDrive sync...
          Current state: {{ states('sensor.onedrive_drive_state') }}
    # Note: The actual sync command depends on your OneDrive integration
    # You may need to call a specific service here
    - delay:
        minutes: 2
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "‚úÖ Sync Process Complete"
        message: >
          OneDrive sync process completed.
          Drive state: {{ states('sensor.onedrive_drive_state') }}
          Health: {{ states('binary_sensor.onedrive_health') }}

# OneDrive Health Check (Updated with actual entities)
onedrive_health_check:
  alias: "OneDrive Health Check"
  description: "Perform comprehensive OneDrive health check"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîç Health Check Running"
        message: "Performing OneDrive health check..."
    - delay:
        seconds: 10
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üìä OneDrive Health Report"
        message: >
          HEALTH CHECK RESULTS:

          üîó Connection: {{ 'Good' if is_state('binary_sensor.onedrive_health', 'on') else 'Issues Detected' }}
          üìä Drive State: {{ states('sensor.onedrive_drive_state') | title }}
          üíæ Storage: {{ states('sensor.onedrive_storage_percentage') }}% used
          ‚ö†Ô∏è Storage Warning: {{ 'Active' if is_state('binary_sensor.onedrive_storage_warning', 'on') else 'None' }}
          üìà Used Space: {{ states('sensor.onedrive_used_storage') }}GB
          üìâ Remaining: {{ states('sensor.onedrive_remaining_storage') }}GB
          üóìÔ∏è Days Until Full: {{ states('sensor.onedrive_days_until_full') }}
        data:
          actions:
            - action: "VIEW_DASHBOARD"
              title: "View Dashboard"
            - action: "FORCE_SYNC"
              title: "Force Sync"
# Add these scripts to your scripts.yaml file

# Immediate Telegram Test
#test_telegram_now:
#  alias: "Test Telegram Right Now"
#  sequence:
#    - service: telegram_bot.send_message
#      data:
#        title: "üîß Telegram Test"
#        message: |
#          Telegram test at {{ now().strftime('%H:%M:%S') }}
#
#          If you receive this message, your Telegram bot is working! ‚úÖ
#
#          System: Home Assistant (192.168.1.30:8123)
#          Status: All systems operational

# Telegram System Status
#telegram_system_status:
#  alias: "Telegram System Status"
#  sequence:
#    - service: telegram_bot.send_message
#      data:
#        title: "üìä System Status"
#        message: |
#          üè† Home Assistant Status Report
#          Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
#
#          üñ•Ô∏è SERVER STATUS:
#          ‚Ä¢ Status: {{ states('sensor.johanba_server_status') | title }}
#          ‚Ä¢ Temperature: {{ states('sensor.johanba_server_system_temperature') }}¬∞C
#          ‚Ä¢ CPU Usage: {{ states('sensor.johanba_server_cpu_usage') }}%
#          ‚Ä¢ Memory: {{ states('sensor.johanba_server_memory_usage') }}%
#
#          ‚òÅÔ∏è ONEDRIVE:
#          ‚Ä¢ Used: {{ states('sensor.onedrive_used_storage') }}GB
#          ‚Ä¢ Free: {{ states('sensor.onedrive_remaining_storage') }}GB
#          ‚Ä¢ Status: {{ states('sensor.onedrive_drive_state') | title }}
#
#          üåê NETWORK:
#          ‚Ä¢ WAN: {{ 'Connected ‚úÖ' if is_state('binary_sensor.archer_d2_wan_status', 'on') else 'Disconnected ‚ùå' }}
#          ‚Ä¢ IP: {{ states('sensor.archer_d2_external_ip') }}
#
#          All systems monitored! üéØ

# Telegram with photo (if you want to test media)
#telegram_test_with_photo:
#  alias: "Telegram Test with System Info"
#  sequence:
#    - service: telegram_bot.send_message
#      data:
#        title: "üì± Advanced Telegram Test"
#        message: |
#          üè† Home Assistant Advanced Test
#
#          This message tests formatting:
#
#          *Bold Text*
#          _Italic Text_
#          `Code Text`
#
#          üîπ Bullet points work
#          üîπ Emojis work ‚úÖ
#          üîπ Multiple lines work
#
#          System IP: {{ states('sensor.archer_d2_external_ip') }}
#          Time: {{ now().strftime('%H:%M:%S') }}
#
#          If you can read this formatted message, everything is perfect! üéâ

# Google Drive Backup Scripts
# Add these to your scripts.yaml file

# Manual Google Drive Backup Creation
create_google_drive_backup:
  alias: "Create Google Drive Backup"
  description: "Manually create a full backup and sync to Google Drive"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîÑ Google Drive Backup Starting"
        message: "Creating full Home Assistant backup to Google Drive..."
        data:
          tag: "gdrive_backup_start"

    # Create the backup using Google Drive Backup integration
    - service: hassio.backup_full
      data:
        name: "Manual_GDrive_Backup_{{ now().strftime('%Y%m%d_%H%M%S') }}"
        compressed: true

    # Wait for backup completion
    - delay:
        minutes: 10

    # Send completion notification
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "‚úÖ Google Drive Backup Complete"
        message: >
          Manual backup created successfully!
          Backup size: {{ states('sensor.google_drive_backup_size') }}
          Status: {{ states('sensor.google_drive_backup_status') }}
        data:
          tag: "gdrive_backup_complete"

    # Send email notification
    - service: notify.email_ha # Assuming you have email notifications set up
      data:
        title: "‚úÖ Google Drive Backup Completed"
        message: |
          Manual Google Drive backup has been completed successfully.

          BACKUP DETAILS:
          ‚Ä¢ Backup Name: Manual_GDrive_Backup_{{ now().strftime('%Y%m%d_%H%M%S') }}
          ‚Ä¢ Creation Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
          ‚Ä¢ Backup Size: {{ states('sensor.google_drive_backup_size') }}
          ‚Ä¢ Status: {{ states('sensor.google_drive_backup_status') }}
          ‚Ä¢ Next Scheduled: {{ states('sensor.google_drive_next_backup') }}

          SYSTEM STATUS:
          ‚Ä¢ Home Assistant Version: {{ states('sensor.home_assistant_core_version') }}
          ‚Ä¢ Host Disk Free: {{ states('sensor.home_assistant_host_disk_free') }}GB
          ‚Ä¢ Memory Usage: {{ states('sensor.johanba_server_memory_usage') }}%
          ‚Ä¢ CPU Temperature: {{ states('sensor.johanba_server_system_temperature') }}¬∞C

          Backup Location: Google Drive/Home Assistant Backups/Full Config Backups/

          This backup includes your complete Home Assistant configuration, add-ons, and data.

# Google Drive Backup Health Check
google_drive_backup_health_check:
  alias: "Google Drive Backup Health Check"
  description: "Comprehensive health check of Google Drive backup system"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîç Google Drive Health Check"
        message: "Running comprehensive backup health check..."

    # Gather all backup information
    - delay:
        seconds: 5

    # Send detailed health report
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üìä Google Drive Health Report"
        message: >
          BACKUP STATUS:
          ‚Ä¢ Current Status: {{ states('sensor.google_drive_backup_status') }}
          ‚Ä¢ Health: {{ 'Good ‚úÖ' if is_state('binary_sensor.google_drive_backup_health', 'on') else 'Critical ‚ùå' }}
          ‚Ä¢ Last Backup: {{ states('sensor.google_drive_last_backup') }}
          ‚Ä¢ Next Backup: {{ states('sensor.google_drive_next_backup') }}
          ‚Ä¢ Backup Size: {{ states('sensor.google_drive_backup_size') }}

          COMPARISON WITH ONEDRIVE:
          ‚Ä¢ OneDrive Status: {{ states('sensor.onedrive_status_simple') }}
          ‚Ä¢ OneDrive Usage: {{ states('sensor.onedrive_usage_percentage') }}%
          ‚Ä¢ OneDrive Health: {{ 'Good ‚úÖ' if is_state('binary_sensor.onedrive_health_simple', 'on') else 'Issues ‚ùå' }}

          SYSTEM STATUS:
          ‚Ä¢ HA Disk Free: {{ states('sensor.home_assistant_host_disk_free') }}GB
          ‚Ä¢ Memory: {{ states('sensor.johanba_server_memory_usage') }}%
          ‚Ä¢ Temperature: {{ states('sensor.johanba_server_system_temperature') }}¬∞C
        data:
          tag: "gdrive_health_report"

# Force Google Drive Sync
force_google_drive_sync:
  alias: "Force Google Drive Sync"
  description: "Force synchronization with Google Drive"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üîÑ Force Google Drive Sync"
        message: >
          Forcing Google Drive synchronization...
          Current status: {{ states('sensor.google_drive_backup_status') }}

    # Call the Google Drive Backup service to force sync
    - service: google_drive_backup.upload

    - delay:
        minutes: 2

    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "‚úÖ Google Drive Sync Complete"
        message: >
          Google Drive sync completed.
          Status: {{ states('sensor.google_drive_backup_status') }}
          Last backup: {{ states('sensor.google_drive_last_backup') }}

# Cleanup Old Google Drive Backups
cleanup_google_drive_backups:
  alias: "Cleanup Old Google Drive Backups"
  description: "Clean up old backups from Google Drive and local storage"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üßπ Cleaning Up Old Backups"
        message: "Starting cleanup of old Google Drive backups..."

    # Call cleanup service
    - service: google_drive_backup.delete_backup
      data:
        slug: "oldest"

    - delay:
        seconds: 30

    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "‚úÖ Cleanup Complete"
        message: >
          Old backup cleanup completed.
          Current backup count maintained within limits.
          Status: {{ states('sensor.google_drive_backup_status') }}

# Emergency Backup Creation
emergency_google_drive_backup:
  alias: "Emergency Google Drive Backup"
  description: "Create emergency backup before major changes"
  sequence:
    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "üö® Emergency Backup Starting"
        message: "Creating emergency backup before system changes..."
        data:
          tag: "emergency_backup"

    - service: hassio.backup_full
      data:
        name: "EMERGENCY_Backup_{{ now().strftime('%Y%m%d_%H%M%S') }}"
        compressed: true

    - delay:
        minutes: 10

    - service: telegram_bot.send_message # Replace with your actual device name
      data:
        title: "‚úÖ Emergency Backup Complete"
        message: >
          Emergency backup created and uploaded to Google Drive.
          Name: EMERGENCY_Backup_{{ now().strftime('%Y%m%d_%H%M%S') }}
          Safe to proceed with system changes.
        data:
          tag: "emergency_backup_complete"

    - service: notify.email_ha
      data:
        title: "üö® Emergency Backup Completed"
        message: |
          Emergency backup has been created and uploaded to Google Drive.

          EMERGENCY BACKUP DETAILS:
          ‚Ä¢ Backup Name: EMERGENCY_Backup_{{ now().strftime('%Y%m%d_%H%M%S') }}
          ‚Ä¢ Creation Time: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
          ‚Ä¢ Purpose: Pre-change safety backup
          ‚Ä¢ Location: Google Drive/Home Assistant Backups/Full Config Backups/

          SYSTEM STATE AT BACKUP:
          ‚Ä¢ HA Version: {{ states('sensor.home_assistant_core_version') }}
          ‚Ä¢ OS Version: {{ states('sensor.home_assistant_operating_system_version') }}
          ‚Ä¢ Disk Free: {{ states('sensor.home_assistant_host_disk_free') }}GB
          ‚Ä¢ Memory Usage: {{ states('sensor.johanba_server_memory_usage') }}%

          This emergency backup captures your complete system state before any changes.
          Keep this backup until changes are verified successful.
